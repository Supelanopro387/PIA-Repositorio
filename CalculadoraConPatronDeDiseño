// Definimos la fábrica de operaciones
class OperationFactory {
    static createOperation(type) {
        switch (type) {
            case 'add':
                return new Addition();
                //PARA EJECUTAR: node '.\CalculadoraWith PatronEeEiseño' add 6, 7
            case 'subtract':
                return new Subtraction();
                //PARA EJECUTAR: node '.\CalculadoraWith PatronEeEiseño' subtract 6, 7
            case 'multiply':
                return new Multiplication();
                //PARA EJECUTAR: node '.\CalculadoraWith PatronEeEiseño' multiply 6, 7
            case 'divide':
                return new Division();
                //PARA EJECUTAR: node '.\CalculadoraWith PatronEeEiseño' divide 6, 7
            default:
                throw new Error('Operación no soportada');
        }
    }
}

// Definimos las clases de operaciones
class Addition {
    calculate(a, b) {
        return a + b;
    }
}

class Subtraction {
    calculate(a, b) {
        return a - b;
    }
}

class Multiplication {
    calculate(a, b) {
        return a * b;
    }
}

class Division {
    calculate(a, b) {
        if (b === 0) {
            throw new Error("No se puede dividir entre cero");
        }
        return a / b;
    }
}

// Función principal para ejecutar la calculadora
function runCalculator() {
    const operationType = process.argv[2];  // Tipo de operación ('add', 'subtract', 'multiply', 'divide')
    const num1 = parseFloat(process.argv[3]);  // Primer número
    const num2 = parseFloat(process.argv[4]);  // Segundo número

    try {
        const operation = OperationFactory.createOperation(operationType);
        const result = operation.calculate(num1, num2);
        console.log(`El resultado de ${operationType} es: ${result}`);
    } catch (error) {
        console.error(error.message);
    }
}

// Ejecuta la calculadora
runCalculator();
